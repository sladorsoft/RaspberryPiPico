.program ws2812a

.wrap_target
    pull block                  ; pull the next data (RGB value for a LED)
    out null, 8                 ; ignore the trailing 8 bits

next_bit:
    out x, 1                    ; copy 1 bit (the MSB) of data to X
    jmp !x bit_0                ; jump if the bit is "0"
                                ; the bit is "1"
    mov pins, !null [1]         ; set the GPIO to "1" (and wait one more tick)
    mov pins, null              ; set the GPIO to "0"
    jmp bit_end                 ; unconditional jump

bit_0:
    mov pins, !null             ; set the GPIO to "1"
    mov pins, null [1]          ; set the GPIO to "0" (and wait one more tick)

bit_end:
    jmp !osre next_bit          ; jump if the shift register contains more bits
                                ; shift register empty -> no more data to send for a LED
.wrap


% c-sdk {

void ws2812a_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config cfg = ws2812a_program_get_default_config(offset);
    sm_config_set_out_shift(&cfg, false, false, 32);
    sm_config_set_clkdiv(&cfg, (clock_get_hz(clk_sys) / 1e6f) * 1.25f / 3.0f);    // 1.25us / 3
    sm_config_set_out_pins(&cfg, pin, 1);

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_init(pio, sm, offset, &cfg);
}
%}
